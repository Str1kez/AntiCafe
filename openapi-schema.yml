openapi: 3.0.2
info:
  title: AntiCafe
  version: 0.1.0
paths:
  /api/users/client/:
    get:
      operationId: infoUser
      description: "# \u041F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u0435 \u0438\
        \u043D\u0444\u044B \u043E \u0441\u0435\u0431\u0435"
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - client
    patch:
      operationId: updateBioUser
      description: "# \u041E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\
        \ ***\u043E \u0441\u0435\u0431\u0435***\n## \u042E\u0437\u0430\u0435\u043C\
        \ `PATCH` \u0437\u0430\u043F\u0440\u043E\u0441, \u0447\u0442\u043E\u0431\u044B\
        \ \u043D\u0435 \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u043F\u0443\u0441\
        \u0442\u044B\u0435 \u043F\u043E\u043B\u044F"
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - client
    delete:
      operationId: destroyUser
      description: "# \u0423\u0434\u0430\u043B\u0435\u043D\u0438\u0435 \u043F\u043E\
        \u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F\n## \u0412\u043C\
        \u0435\u0441\u0442\u043E \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u044F\
        \ \u043E\u0442\u043C\u0435\u0447\u0430\u0435\u043C \u0438\u0445 \u043A\u0430\
        \u043A \u043D\u0435 \u0430\u043A\u0442\u0438\u0432\u043D\u044B\u0435"
      parameters: []
      responses:
        '204':
          description: ''
      tags:
      - client
  /api/users/admin/:
    get:
      operationId: listUsers
      description: "# \u0412\u044C\u044E\u0448\u043A\u0430 \u0434\u043B\u044F \u0430\
        \u0434\u043C\u0438\u043D\u043E\u0432 \u043A\u0430\u0444\u0435\u0448\u043A\u0438"
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
      tags:
      - admin
  /api/users/admin/{id}/:
    get:
      operationId: retrieveUser
      description: "# \u0412\u044C\u044E\u0448\u043A\u0430 \u0434\u043B\u044F \u0430\
        \u0434\u043C\u0438\u043D\u043E\u0432 \u043A\u0430\u0444\u0435\u0448\u043A\u0438"
      parameters:
      - name: id
        in: path
        required: true
        description: "A UUID string identifying this \u043F\u043E\u043B\u044C\u0437\
          \u043E\u0432\u0430\u0442\u0435\u043B\u044C."
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - admin
  /api/users/register/:
    post:
      operationId: createUser
      description: '# Register User

        ## Required Username and Password'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - registration
  /api/token/:
    post:
      operationId: createTokenObtainPair
      description: 'Takes a set of user credentials and returns an access and refresh
        JSON web

        token pair to prove the authentication of those credentials.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
      tags:
      - token
  /api/token/refresh/:
    post:
      operationId: createTokenRefresh
      description: 'Takes a refresh type JSON web token and returns an access type
        JSON web

        token if the refresh token is valid.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
      tags:
      - token
  /api/token/blacklist/:
    post:
      operationId: createTokenBlacklist
      description: '# Need to be authenticated for logout

        Front must go to endpoint with `''refresh''` token in data

        After that, delete `''access''` token from cookie'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBlacklist'
          description: ''
      tags:
      - token
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          description: "\u041E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\
            \u043E\u0435 \u043F\u043E\u043B\u0435. \u041D\u0435 \u0431\u043E\u043B\
            \u0435\u0435 150 \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432. \u0422\
            \u043E\u043B\u044C\u043A\u043E \u0431\u0443\u043A\u0432\u044B, \u0446\u0438\
            \u0444\u0440\u044B \u0438 \u0441\u0438\u043C\u0432\u043E\u043B\u044B @/./+/-/_."
          pattern: ^[\w.@+-]+\z
          maxLength: 150
          unique: true
        password:
          type: string
          maxLength: 128
        fullname:
          type: string
        email:
          type: string
          format: email
          maxLength: 254
        avatar:
          type: string
          format: binary
          nullable: true
        phone:
          type: string
          nullable: true
          maxLength: 12
        qrcode:
          type: string
          readOnly: true
          nullable: true
        is_staff:
          type: boolean
          description: "\u041E\u0442\u043C\u0435\u0442\u044C\u0442\u0435, \u0435\u0441\
            \u043B\u0438 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\
            \u043B\u044C \u043C\u043E\u0436\u0435\u0442 \u0432\u0445\u043E\u0434\u0438\
            \u0442\u044C \u0432 \u0430\u0434\u043C\u0438\u043D\u0438\u0441\u0442\u0440\
            \u0430\u0442\u0438\u0432\u043D\u0443\u044E \u0447\u0430\u0441\u0442\u044C\
            \ \u0441\u0430\u0439\u0442\u0430."
      required:
      - username
      - password
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
      - refresh
    TokenBlacklist:
      type: object
      properties:
        refresh:
          type: string
      required:
      - refresh
